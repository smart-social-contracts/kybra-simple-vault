type CallbackStrategy = record {
  token : Token;
  callback : func (Token) -> (StreamingCallbackHttpResponse) query;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  upgrade : opt bool;
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type StreamingCallbackHttpResponse = record { token : opt Token; body : blob };
type StreamingStrategy = variant { Callback : CallbackStrategy };
type Token = record { key : text };
service : () -> {
  caller : () -> (principal) query;
  create_user : (text) -> (text) query;
  create_user_endpoint : () -> (text);
  destroy_universe : () -> (text);
  do_request : (text) -> (text) query;
  get_canister_balance : () -> (nat) query;
  get_organization_data : (text) -> (text) query;
  get_organization_list : () -> (text) query;
  get_proposal_data : (text) -> (text) query;
  get_stats : () -> (text) query;
  get_token_data : (text) -> (text) query;
  get_token_list : () -> (text) query;
  get_token_transactions : (text, text, int) -> (text) query;
  get_universe : () -> (text) query;
  get_user_data : (text) -> (text) query;
  get_user_list : () -> (text) query;
  greet : (text) -> (text) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  run_code : (text) -> (text);
  user_join_organization_endpoint : (text) -> (text);
}
